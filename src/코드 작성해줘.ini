getMongoType 기준, canTraverse 함수 로직과 필드 렌더링(필드, 상세정보) 구조를 바꿀거야. 다음 요구사항을 참조해줘.
[요구사항]
- typeWithObjectID(feild.value: any):
    if (value == primitive type): return false;
    else(value가 배열 or object or ObjectID 문자열): value 내 모든 데이터 순회하며 ObjectID가 존재하는지 확인, 있으면 return true / 없으면 return false;
- getMongoType: 
    ...primitive types 코드
    if (typeWithObjectID(value)):
      if (feild.value의 내부 최상위 key에 '_id' 존재):
      else if () 
- canTraverse(feild.value: any):
    if (hasObjectID(feild.value)):
        return true;
    else: return false; // primitive type임
- 필드 렌더링 시 확인할 내용: 








다음 로직에 따라 타입 정의 의사 코드 작성해줘
[함수 1(value: any): string]
if (value가 primitive type인지 확인):
  return 'primitive'
else: // else의 경우는 Array나 object가 됨
  if (최상위에 key로 '_id' 존재): return 'SubDocument'
  else if (value를 순회해 '_id' key 존재 확인):
    return 'EmbeddedDocument'
  





1. 메인에서 newField에 refDoc, refColl, refDB 추가 





{/* 상단 네비게이션 */}
      <div className="Collection_Panel_Navigation bg-white rounded-lg shadow-sm border border-gray-200 p-4 mb-4 overflow-x-auto overflow-y-hidden">
        <nav className="flex items-center space-x-2 text-sm">
          <svg className="w-4 h-4 text-gray-500 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4" />
          </svg>
          {getBreadcrumb().map((item, index) => (
            <React.Fragment key={index}>
              {index > 0 && (
                <svg className="w-4 h-4 text-gray-400 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                </svg>
              )}
              <button
                onClick={() => {
                  if (index >= 3) {
                    handleBackNavigation(index - 2);
                  } else handleBackNavigation(0);
                }}
                className={`truncate min-w-0 ${index === getBreadcrumb().length - 1 ? 'text-green-600 font-medium' : 'text-gray-600 hover:text-gray-900 cursor-pointer'
                  } transition-colors duration-200`}
              >
                {item}
              </button>
            </React.Fragment>
          ))}
        </nav>
      </div>